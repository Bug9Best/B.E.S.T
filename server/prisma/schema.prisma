// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  fname            String
  lname            String
  role             Role               @default(GUESS)
  CourseUser       CourseUser[] //เราอยู่ในคอสไหนบ้าง
  Course           Course[] //เราสร้างคอสไหนบ้าง
  CourseInstructor CourseInstructor[] //เราเป็นอาจารย์ในคอสไหนบ้าง
  Forum            Forum[] //เราเป็นผู้ตั้งกระทู้ในคอสไหนบ้าง
  ForumComment     ForumComment[] //เราเป็นผู้ตอบกระทู้ในคอสไหนบ้าง
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  SendMessage      Message[]          @relation("senderMessage") //เราส่งข้อความให้ใครบ้าง
  ReciveMessage    Message[]          @relation("reciveMessage") //เราได้รับข้อความจากใครบ้าง
  ChatUser         ChatUser[] //เราเข้าห้องแชทไหนบ้าง
  NotifyUser       NotifyUser[] //เราได้รับการแจ้งเตือนไหม
}

enum Role {
  GUESS
  INSTRUCTOR
  USER
}

model CourseInstructor {
  id        Int      @id @default(autoincrement())
  courseId  Int
  userId    Int
  role      Role     @default(INSTRUCTOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("course_instructor")
}

model CourseUser {
  id        Int      @id @default(autoincrement())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      Role     @default(GUESS)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_user")
}

model Course {
  id               Int                @id @default(autoincrement())
  courseId         Int                @unique
  title            String             @unique
  description      String
  authorId         Int //เราสร้างคอสนี้โดยใคร
  member           CourseUser[] //เรามีสมาชิกในคอสนี้ไหม
  CourseInstructor CourseInstructor[] //เรามีอาจารย์ในคอสนี้ไหม
  CourseContent    CourseContent[] //เรามีเนื้อหาในคอสนี้ไหม
  Assignment       Assignment[] //เรามีการบ้านในคอสนี้ไหม
  Forum            Forum[]
  author           User               @relation(fields: [authorId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model CourseContent {
  id        Int      @id @default(autoincrement())
  courseId  Int
  title     String
  content   String
  file      File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("course_content")
}

model Assignment {
  id        Int      @id @default(autoincrement())
  courseId  Int
  title     String
  content   String
  file      File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
}

model Forum {
  id           Int            @id @default(autoincrement())
  courseId     Int
  authorId     Int
  title        String
  content      String
  createdAt    DateTime       @default(now())
  ForumComment ForumComment[]
  updatedAt    DateTime       @updatedAt
  author       User           @relation(fields: [authorId], references: [id])
  course       Course         @relation(fields: [courseId], references: [id])
}

model ForumComment {
  id        Int      @id @default(autoincrement())
  forumId   Int
  authorId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  forum     Forum    @relation(fields: [forumId], references: [id])
}

model File {
  id              Int            @id @default(autoincrement())
  type            FileType
  filename        String
  mimetype        String
  size            Int
  url             String
  courseContentId Int?
  CourseContent   CourseContent? @relation(fields: [courseContentId], references: [id])
  Assignment      Assignment?    @relation(fields: [assignmentId], references: [id])
  assignmentId    Int?
}

enum FileType {
  IMAGE
  DOCUMENT
}

model ChatUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        Int        @id @default(autoincrement())
  ChatUser  ChatUser[]
  Message   Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Message {
  id           Int      @id @default(autoincrement())
  userSender   Int
  UserSender   User     @relation("senderMessage", fields: [userSender], references: [id])
  userReceiver Int
  UserReceiver User     @relation("reciveMessage", fields: [userReceiver], references: [id])
  chatId       Int
  message      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Chat         Chat     @relation(fields: [chatId], references: [id])
}

model NotifyUser {
  id        Int          @id @default(autoincrement())
  userId    Int
  notifyId  Int
  status    NotifyStatus
  User      User         @relation(fields: [userId], references: [id])
  notify    Notify       @relation(fields: [notifyId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum NotifyStatus {
  READ
  UNREAD
}

model Notify {
  id         Int          @id @default(autoincrement())
  message    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  NotifyUser NotifyUser[] //เราได้รับการแจ้งเตือนไหม
}
