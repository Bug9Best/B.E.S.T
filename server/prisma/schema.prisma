// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  email      String
  fullname   String
  generation String
  degree     String
  role       String
  createdAt  DateTime @default(now())

  owners           OwnerCourse[]
  enrollments      Enrollment[]
  assignments      Assignment[]
  posts            Post[]
  comments         Comments[]
  notify           Notify[]
  sentMessages     Message[]     @relation("Sender")
  receivedMessages Message[]     @relation("Receiver")
  chats            Chat[]        @relation("UserToChat")
}

model Course {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  term        String
  title       String
  description String
  owners      OwnerCourse[]
  enrollments Enrollment[]
  assignments Assignment[]
  posts       Post[]
  File        File[]
}

model OwnerCourse {
  id       Int    @id @default(autoincrement())
  courseId Int
  userId   Int
  course   Course @relation(fields: [courseId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

model Enrollment {
  id       Int    @id @default(autoincrement())
  courseId Int
  userId   Int
  course   Course @relation(fields: [courseId], references: [id])
  student  User   @relation(fields: [userId], references: [id])
}

model Assignment {
  id          Int      @id @default(autoincrement())
  courseId    Int
  creatorId   Int
  title       String
  description String
  dueDate     DateTime
  createdAt   DateTime @default(now())
  creator     User     @relation(fields: [creatorId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])
  files       File[]
}

model Post {
  id        Int        @id @default(autoincrement())
  courseId  Int
  authorId  Int
  content   String
  createdAt DateTime   @default(now())
  comments  Comments[]
  author    User       @relation(fields: [authorId], references: [id])
  course    Course     @relation(fields: [courseId], references: [id])
  files     File[]
}

model Comments {
  id        Int      @id @default(autoincrement())
  postId    Int
  authorId  Int
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model File {
  id           Int         @id @default(autoincrement())
  filename     String
  path         String
  createdAt    DateTime    @default(now())
  courseId     Int?
  postId       Int?
  assignmentId Int?
  course       Course?     @relation(fields: [courseId], references: [id])
  post         Post?       @relation(fields: [postId], references: [id])
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
}

model Chat {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    Int?
  users     User[]    @relation("UserToChat")
  messages  Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  senderId   Int
  receiverId Int
  chatId     Int
  createdAt  DateTime @default(now())
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  chat       Chat     @relation(fields: [chatId], references: [id])
}

enum NotifyStatus {
  READ
  UNREAD
}

model Notify {
  id        Int          @id @default(autoincrement())
  message   String
  status    NotifyStatus @default(UNREAD)
  createdAt DateTime     @default(now())
  userId    Int
  User      User         @relation(fields: [userId], references: [id])
}
